

// This contains some CUDA definitions
#ifndef GPUERRCHK
#define GPUERRCHK(ans) { gpuAssert((ans), __FILE__, __LINE__); }
inline void gpuAssert(cudaError_t code, const char *file, int line, bool abort=true)
{
   if (code != cudaSuccess) 
   {
      fprintf(stderr,"GPUassert: %s %s %d\n", cudaGetErrorString(code), file, line);
      if (abort) exit(code);
   }
}
#endif

 
#ifndef _USAGE
void show_GPU_memusage()
{
	using namespace std;
	// show memory usage of GPU
	size_t free_byte ;
	
	size_t total_byte ;
	
	auto cuda_status = cudaMemGetInfo( &free_byte, &total_byte ) ;
	
	if ( cudaSuccess != cuda_status ) {
		printf("Error: cudaMemGetInfo fails, %s \n", cudaGetErrorString(cuda_status) );
		exit(1);
	}
		
	double free_db = (double)free_byte ;
	
	double total_db = (double)total_byte ;
	
	double used_db = total_db - free_db ;
	
	printf("\nGPU memory usage: used = %f, free = %f MB, total = %f MB\n", used_db/1024.0/1024.0, free_db/1024.0/1024.0, total_db/1024.0/1024.0);
}
	
#define _USAGE {show_GPU_memusage(); }	
#endif 
 
 
 
